{"version":3,"sources":["plugins/Library/services/post.ts","plugins/Library/pages/Dashboard.tsx","plugins/Library/pages/EditPost.tsx","plugins/Library/pages/PostDetail.tsx","plugins/Library/pages/PostView.tsx","plugins/Library/routes/PublicRoutes.tsx","plugins/Library/Main.tsx"],"names":["apiUrl","service","getAll","axios","get","getById","postId","create","model","post","edit","put","remove","delete","changeOrder","changeType","Dashboard","dispatch","useDispatch","React","useState","keyWord","setKeyWord","posts","setPosts","refresh","a","loadingActions","show","postService","alertActions","alertMessage","FETCH_FAILURE","hide","useEffect","Grid","container","spacing","item","xs","label","value","onChange","e","target","Divider","filter","x","title","includes","map","to","id","Typography","variant","useStyles","makeStyles","theme","formControl","margin","marginBottom","initialPost","changedBy","changedTime","Date","content","createdBy","createdTime","parentId","order","EditPost","classes","useParams","setPost","getPostDetail","handleSubmit","ACTION_SUCCESS","ACTION_FAILURE","handleRemove","window","prompt","handleChangeOrder","required","event","options","optionLabel","getOptionSelected","o","v","find","text","color","icon","onClick","FormControl","fullWidth","className","PostDetail","dangerouslySetInnerHTML","__html","PostView","isCreator","setIsCreator","checkRolePermission","PublicRoutes","path","useRouteMatch","component","PrivateRoutes","lazy","CreatorRoutes","Main","isAdmin","setIsAdmin","layoutActions","setActivePluginId","plugin","checkAdmin","then","result","catch","adminList","adminMenuList","creatorList","creatorMenuList","setMenuList","menuList"],"mappings":"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","file":"static/js/20.cf3155dd.chunk.js","sourcesContent":["import axios from 'axios';\n\nconst apiUrl = '/api/library/posts';\n\nexport type PostModel = AddPostModel & {\n  id: number;\n  createdBy: string;\n  createdTime: Date;\n  changedBy: string;\n  changedTime: Date;\n  order: number;\n}\n\nexport type AddPostModel = {\n  title: string;\n  content: string;\n  parentId: number;\n}\n\nfunction getAll(): Promise<PostModel[]> {\n  return axios.get(apiUrl);\n}\n\nfunction getById(postId: number): Promise<PostModel> {\n  return axios.get(`${apiUrl}/${postId}`);\n}\n\nfunction create(model: AddPostModel): Promise<number> {\n  return axios.post(apiUrl, model);\n}\n\nfunction edit(postId: number, model: PostModel): Promise<unknown> {\n  return axios.put(`${apiUrl}/${postId}`, model);\n}\n\nfunction remove (postId: number): Promise < unknown > {\n  return axios.delete(`${apiUrl}/${postId}`);\n}\n\nfunction changeOrder(postId: number, changeType: number): Promise<unknown> {\n  return axios.put(`${apiUrl}/changeOrder/${postId}/${changeType}`);\n}\n\nconst service = {\n  getAll,\n  getById,\n  create,\n  edit,\n  remove,\n  changeOrder,\n};\n\nexport default service;\n","import React from 'react';\nimport { useDispatch } from 'react-redux';\nimport { Link } from 'react-router-dom';\nimport {\n  Divider,\n  Grid,\n  Typography,\n} from '@material-ui/core';\n\nimport {\n  TextField,\n} from '@nvdunginest/emis-mui';\n\nimport {\n  alertActions,\n  loadingActions,\n  alertMessage,\n  AppDispatch,\n} from '../../../core';\n\nimport postService, { PostModel } from '../services/post';\n\nexport default function Dashboard(): JSX.Element {\n  const dispatch: AppDispatch = useDispatch();\n\n  const [keyWord, setKeyWord] = React.useState<string>('');\n  const [posts, setPosts] = React.useState<PostModel[]>([]);\n\n  const refresh = async () => {\n    dispatch(loadingActions.show());\n    try {\n      setPosts(await postService.getAll());\n    }\n    catch {\n      dispatch(alertActions.show(alertMessage.FETCH_FAILURE, 'error'));\n    }\n    finally {\n      dispatch(loadingActions.hide());\n    }\n  }\n\n  React.useEffect(() => {\n    refresh();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  return (\n    <Grid container spacing={1}>\n      <Grid item xs={12}>\n        <TextField\n          label=\"Tìm kiếm\"\n          value={keyWord}\n          onChange={(e) => { setKeyWord(e.target.value); }}\n        />\n      </Grid>\n      <Grid item xs={12}>\n        <Divider />\n      </Grid>\n      {posts.filter(x => x.title.includes(keyWord)).map(post => (\n        <Grid item key={post.id} xs={12}>\n          <Grid container spacing={4}>\n            <Grid item>\n              <Link to={`/library/posts/${post.id}`}>\n                <Typography variant=\"h6\">{post.title}</Typography>\n              </Link>\n            </Grid>\n          </Grid>\n        </Grid>\n      ))}\n    </Grid>\n  )\n}\n","import React from 'react';\nimport { useDispatch } from 'react-redux';\nimport { useParams } from 'react-router-dom';\nimport { makeStyles } from '@material-ui/core/styles';\nimport {\n  Grid,\n  Typography,\n  FormControl,\n} from '@material-ui/core';\nimport {\n  TextField,\n  IconButton,\n  ComboBox,\n  Editor,\n} from '@nvdunginest/emis-mui';\n\nimport {\n  alertActions,\n  loadingActions,\n  alertMessage,\n  AppDispatch,\n} from '../../../core';\n\nimport postService, { PostModel } from '../services/post';\n\nconst useStyles = makeStyles((theme) => ({\n  formControl: {\n    margin: 0,\n    marginBottom: theme.spacing(1.5),\n  },\n}));\n\nconst initialPost: PostModel = {\n  id: 0,\n  changedBy: '',\n  changedTime: new Date(),\n  content: '',\n  createdBy: '',\n  createdTime: new Date(),\n  title: '',\n  parentId: 0,\n  order: 0,\n}\n\nexport default function EditPost(): JSX.Element {\n  const classes = useStyles();\n  const { postId }: never = useParams();\n  const dispatch: AppDispatch = useDispatch();\n\n  const [post, setPost] = React.useState<PostModel>(initialPost);\n  const [posts, setPosts] = React.useState<PostModel[]>([]);\n\n  const refresh = async () => {\n    dispatch(loadingActions.show());\n    try {\n      setPosts(await postService.getAll());\n    }\n    catch {\n      dispatch(alertActions.show(alertMessage.FETCH_FAILURE, 'error'));\n    }\n    finally {\n      dispatch(loadingActions.hide());\n    }\n  }\n\n  const getPostDetail = async () => {\n    dispatch(loadingActions.show());\n    try {\n      setPost(await postService.getById(postId));\n    }\n    catch {\n      setPost(initialPost);\n      dispatch(alertActions.show(alertMessage.FETCH_FAILURE, 'error'));\n    }\n    finally {\n      dispatch(loadingActions.hide());\n    }\n  }\n\n  const handleChangeTitle = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setPost({ ...post, title: event.target.value });\n  }\n\n  const handleChangeParentId = (value: PostModel | null) => {\n    if (value !== null) {\n      setPost({ ...post, parentId: value.id });\n    }\n  }\n\n  const handleSubmit = async () => {\n    dispatch(loadingActions.show());\n    try {\n      await postService.edit(post.id, post);\n      dispatch(alertActions.show(alertMessage.ACTION_SUCCESS, 'success'));\n    }\n    catch {\n      dispatch(alertActions.show(alertMessage.ACTION_FAILURE, 'error'));\n    }\n    finally {\n      dispatch(loadingActions.hide());\n    }\n  }\n\n  const handleRemove = async () => {\n    const confirm = window.prompt('Nhập tiêu đề bài viết để xác nhận xóa!');\n    if (confirm === post.title) {\n      dispatch(loadingActions.show());\n      try {\n        await postService.remove(post.id);\n        dispatch(alertActions.show(alertMessage.ACTION_SUCCESS, 'success'));\n      }\n      catch {\n        dispatch(alertActions.show(alertMessage.ACTION_FAILURE, 'error'));\n      }\n      finally {\n        dispatch(loadingActions.hide());\n      }\n    }\n  }\n\n  const handleChangeOrder = async (changeType: number) => {\n    dispatch(loadingActions.show());\n    try {\n      await postService.changeOrder(post.id, changeType);\n      dispatch(alertActions.show(alertMessage.ACTION_SUCCESS, 'success'));\n    }\n    catch {\n      dispatch(alertActions.show(alertMessage.ACTION_FAILURE, 'error'));\n    }\n    finally {\n      dispatch(loadingActions.hide());\n    }\n  }\n\n  React.useEffect(() => {\n    getPostDetail();\n    refresh();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [postId]);\n\n  return (\n    <Grid container spacing={1}>\n      <Grid item xs={12}>\n        <TextField\n          label=\"Tiêu đề\"\n          required\n          value={post.title}\n          onChange={handleChangeTitle}\n        />\n      </Grid>\n      <Grid item xs={12}>\n        <ComboBox\n          options={posts.filter(x => x.id !== post.id)}\n          optionLabel=\"title\"\n          label=\"Thuộc về\"\n          required\n          getOptionSelected={(o, v) => o.id === v.id}\n          value={posts.find(x => x.id === post.parentId)}\n          onChange={handleChangeParentId}\n        />\n      </Grid>\n      <Grid item>\n        <IconButton\n          variant=\"contained\"\n          text=\"Lên đầu\"\n          color=\"primary\"\n          icon=\"angle-double-up\"\n          onClick={() => { handleChangeOrder(1); }}\n        />\n      </Grid>\n      <Grid item>\n        <IconButton\n          variant=\"contained\"\n          text=\"Lên trên\"\n          color=\"primary\"\n          icon=\"angle-up\"\n          onClick={() => { handleChangeOrder(2); }}\n        />\n      </Grid>\n      <Grid item>\n        <IconButton\n          variant=\"contained\"\n          text=\"Xuống dưới\"\n          color=\"primary\"\n          icon=\"angle-down\"\n          onClick={() => { handleChangeOrder(3); }}\n        />\n      </Grid>\n      <Grid item>\n        <IconButton\n          variant=\"contained\"\n          text=\"Xuống cuối\"\n          color=\"primary\"\n          icon=\"angle-double-down\"\n          onClick={() => { handleChangeOrder(4); }}\n        />\n      </Grid>\n      <Grid item>\n        <IconButton\n          variant=\"contained\"\n          text=\"Xóa bài viết\"\n          color=\"danger\"\n          icon=\"trash-alt\"\n          onClick={() => { handleRemove(); }}\n        />\n      </Grid>\n      <Grid item xs={12}>\n        <Typography variant=\"subtitle1\">Nội dung</Typography>\n        <FormControl fullWidth variant=\"outlined\" className={classes.formControl}>\n          <Editor\n            value={post.content}\n            onChange={(content) => { setPost({ ...post, content: content }) }}\n          />\n        </FormControl>\n      </Grid>\n      <Grid item xs={12}>\n        <IconButton\n          variant=\"contained\"\n          text=\"Lưu lại\"\n          color=\"success\"\n          icon=\"plus\"\n          onClick={handleSubmit}\n        />\n      </Grid>\n    </Grid>\n  )\n}","import React from 'react';\nimport { useDispatch } from 'react-redux';\nimport { useParams } from 'react-router-dom';\nimport {\n  Divider,\n  Grid,\n  Typography,\n} from '@material-ui/core';\n\nimport {\n  alertActions,\n  loadingActions,\n  alertMessage,\n  AppDispatch,\n} from '../../../core';\n\nimport postService, { PostModel } from '../services/post';\n\nconst initialPost: PostModel = {\n  id: 0,\n  changedBy: '',\n  changedTime: new Date(),\n  content: '',\n  createdBy: '',\n  createdTime: new Date(),\n  title: '',\n  parentId: 0,\n  order: 0,\n}\n\nexport default function PostDetail(): JSX.Element {\n  const dispatch: AppDispatch = useDispatch();\n  const { postId }: never = useParams();\n\n  const [post, setPost] = React.useState<PostModel>(initialPost);\n\n  const refresh = async () => {\n    dispatch(loadingActions.show());\n    try {\n      setPost(await postService.getById(postId));\n    }\n    catch {\n      setPost(initialPost);\n      dispatch(alertActions.show(alertMessage.FETCH_FAILURE, 'error'));\n    }\n    finally {\n      dispatch(loadingActions.hide());\n    }\n  }\n\n  React.useEffect(() => {\n    refresh();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [postId]);\n\n  return (\n    <Grid container spacing={1}>\n      <Grid item xs={12}>\n        <Typography variant=\"h4\">\n          {post.title}\n        </Typography>\n        <Divider />\n      </Grid>\n      <Grid item xs={12}>\n        <div dangerouslySetInnerHTML={{ __html: post.content }}></div>\n      </Grid>\n    </Grid>\n  )\n}","import React from 'react';\n\nimport { checkRolePermission } from '../configs';\n\nimport EditPost from './EditPost';\nimport PostDetail from './PostDetail';\n\nexport default function PostView(): JSX.Element {\n  const [isCreator, setIsCreator] = React.useState<boolean>(false);\n\n  const refresh = async () => {\n    setIsCreator(await checkRolePermission('CREATOR_ROLE'));\n  }\n\n  React.useEffect(() => {\n    refresh();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  return isCreator ? <EditPost /> : <PostDetail />;\n}","import React from 'react';\nimport {\n  Route,\n  Switch,\n  useRouteMatch,\n} from 'react-router-dom';\n\nimport Dashboard from '../pages/Dashboard';\nimport PostView from '../pages/PostView';\n\nexport default function PublicRoutes(): JSX.Element {\n  const { path } = useRouteMatch();\n\n  return (\n    <Switch>\n      <Route path={`${path}/dashboard`} component={Dashboard} />\n      <Route path={`${path}/posts/:postId`} component={PostView} />\n    </Switch>\n  );\n}\n","import React from 'react';\nimport {\n  Switch,\n  Route,\n  useRouteMatch,\n} from 'react-router-dom';\nimport { useDispatch } from 'react-redux';\n\nimport {\n  AppDispatch,\n  layoutActions,\n} from '../../core';\n\nimport {\n  plugin,\n  checkAdmin,\n  checkRolePermission,\n\n  menuList,\n  adminMenuList,\n  creatorMenuList,\n} from './configs';\n\nconst PrivateRoutes = React.lazy(() => import('./routes/PrivateRoutes'));\nimport PublicRoutes from './routes/PublicRoutes';\n\nconst CreatorRoutes = React.lazy(() => import('./routes/CreatorRoutes'));\n\nexport default function Main(): JSX.Element {\n  const { path } = useRouteMatch();\n  const dispatch: AppDispatch = useDispatch();\n\n  const [isAdmin, setIsAdmin] = React.useState(false);\n  const [isCreator, setIsCreator] = React.useState(false);\n\n  React.useEffect(() => {\n    dispatch(layoutActions.setActivePluginId(plugin.id));\n    checkAdmin()\n      .then((result) => {\n        setIsAdmin(result);\n      })\n      .catch(() => {\n        setIsAdmin(false);\n      });\n    checkRolePermission('CREATOR_ROLE')\n      .then((result) => {\n        setIsCreator(result);\n      })\n      .catch(() => {\n        setIsCreator(false);\n      });\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  React.useEffect(() => {\n    const adminList = isAdmin ? [...adminMenuList] : [];\n    const creatorList = isCreator ? [...creatorMenuList] : [];\n    dispatch(layoutActions.setMenuList([\n      ...menuList,\n      ...creatorList,\n      ...adminList,\n    ]));\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [isAdmin, isCreator]);\n\n  return (\n    <Switch>\n      {isCreator && <Route path={`${path}/creator`} component={CreatorRoutes} />}\n      {isAdmin && <Route path={`${path}/admin`} component={PrivateRoutes} />}\n      <Route path={`${path}`} component={PublicRoutes} />\n    </Switch>\n  );\n}\n"],"sourceRoot":""}