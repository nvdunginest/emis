{"version":3,"sources":["plugins/Dashboard/pages/About.tsx","plugins/Dashboard/services/account.ts","plugins/Dashboard/pages/ChangePassword.tsx","plugins/Dashboard/routes/PublicRoutes.tsx","plugins/Dashboard/Main.tsx"],"names":["About","text","service","changePassword","model","axios","post","initialState","oldPassword","newPassword","confirmPassword","ChangePassword","dispatch","useDispatch","React","useState","state","setState","handleChange","event","target","name","value","handleSave","a","loadingActions","show","accountService","alertActions","alertMessage","ACTION_SUCCESS","ACTION_FAILURE","hide","title","Grid","container","alignItems","item","xs","md","spacing","label","type","onChange","icon","variant","onClick","PublicRoutes","path","useRouteMatch","exact","component","PrivateRoutes","lazy","Main","isAdmin","setIsAdmin","useEffect","layoutActions","setActivePluginId","plugin","id","checkAdmin","then","result","catch","adminList","adminMenuList","setMenuList","menuList"],"mappings":"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","file":"static/js/30.f33754a5.chunk.js","sourcesContent":["import React from 'react';\nimport {\n  DashboardForm\n} from '@nvdunginest/emis-mui';\n\nconst pageText = 'ECOBA MANAGEMENT INFORMATION SYSTEM';\n\nexport default function About(): JSX.Element {\n  return <DashboardForm text={pageText} />\n}\n","import axios from 'axios';\n\nexport type ChangePasswordModel = {\n  oldPassword: string;\n  newPassword: string;\n  confirmPassword: string;\n}\n\nfunction changePassword(model: ChangePasswordModel): Promise<unknown> {\n  return axios.post('api/account/changePassword', model);\n}\n\nconst service = {\n  changePassword,\n};\n\nexport default service;\n","import React from 'react';\nimport { useDispatch } from 'react-redux';\nimport {\n  Grid,\n} from '@material-ui/core';\nimport {\n  IconButton,\n  TextField,\n  Frame,\n} from '@nvdunginest/emis-mui';\n\nimport accountService, {\n  ChangePasswordModel,\n} from '../services/account';\n\nimport {\n  AppDispatch,\n  alertActions,\n  alertMessage,\n  loadingActions,\n} from '../../../core';\n\nconst initialState: ChangePasswordModel = {\n  oldPassword: '',\n  newPassword: '',\n  confirmPassword: '',\n}\n\nexport default function ChangePassword(): JSX.Element {\n  const dispatch: AppDispatch = useDispatch();\n  const [state, setState] = React.useState<ChangePasswordModel>(initialState);\n\n  const handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setState({ ...state, [event.target.name]: event.target.value });\n  }\n\n  const handleSave = async () => {\n    dispatch(loadingActions.show());\n    try {\n      await accountService.changePassword(state);\n      dispatch(alertActions.show(alertMessage.ACTION_SUCCESS, 'success'));\n      setState(initialState);\n    }\n    catch {\n      dispatch(alertActions.show(alertMessage.ACTION_FAILURE, 'error'));\n    }\n    finally {\n      dispatch(loadingActions.hide());\n    }\n  }\n\n  return (\n    <Frame title=\"Đổi mật khẩu\">\n      <Grid container alignItems=\"flex-end\">\n        <Grid container item xs={12} md={6} spacing={2}>\n          <Grid item xs={12}>\n            <TextField\n              name=\"oldPassword\"\n              label=\"Mật khẩu hiện tại\"\n              value={state.oldPassword}\n              type=\"password\"\n              onChange={handleChange}\n            />\n          </Grid>\n          <Grid item xs={12}>\n            <TextField\n              name=\"newPassword\"\n              label=\"Mật khẩu mới\"\n              value={state.newPassword}\n              type=\"password\"\n              onChange={handleChange}\n            />\n          </Grid>\n          <Grid item xs={12}>\n            <TextField\n              name=\"confirmPassword\"\n              label=\"Xác nhận mật khẩu\"\n              value={state.confirmPassword}\n              type=\"password\"\n              onChange={handleChange}\n            />\n          </Grid>\n          <Grid item xs={12} container spacing={1}>\n            <Grid item>\n              <IconButton\n                text=\"Đổi mật khẩu\"\n                icon=\"sync-alt\"\n                variant=\"contained\"\n                onClick={handleSave}\n              />\n            </Grid>\n          </Grid>\n        </Grid>\n        <Grid container item xs={12} md={6}></Grid>\n      </Grid>\n    </Frame>\n  );\n}\n","import React from 'react';\nimport {\n  Route,\n  Switch,\n  useRouteMatch,\n} from 'react-router-dom';\n\nimport About from '../pages/About';\nimport ChangePassword from '../pages/ChangePassword';\n\nexport default function PublicRoutes(): JSX.Element {\n  const { path } = useRouteMatch();\n\n  return (\n    <Switch>\n      <Switch>\n        <Route exact path={`${path}`} component={About} />\n        <Route path={`${path}change-password`} component={ChangePassword} />\n      </Switch>\n    </Switch>\n  );\n}\n","import React from 'react';\nimport {\n  Switch,\n  Route,\n  useRouteMatch,\n} from 'react-router-dom';\nimport { useDispatch } from 'react-redux';\n\nimport {\n  AppDispatch,\n  layoutActions,\n} from '../../core';\n\nimport {\n  plugin,\n  checkAdmin,\n\n  menuList,\n  adminMenuList,\n} from './configs';\n\nconst PrivateRoutes = React.lazy(() => import('./routes/PrivateRoutes'));\nimport PublicRoutes from './routes/PublicRoutes';\n\nexport default function Main(): JSX.Element {\n  const { path } = useRouteMatch();\n  const dispatch: AppDispatch = useDispatch();\n\n  const [isAdmin, setIsAdmin] = React.useState(false);\n\n  React.useEffect(() => {\n    dispatch(layoutActions.setActivePluginId(plugin.id));\n    checkAdmin()\n      .then((result) => {\n        setIsAdmin(result);\n      })\n      .catch(() => {\n        setIsAdmin(false);\n      });\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  React.useEffect(() => {\n    const adminList = isAdmin ? [...adminMenuList] : [];\n    dispatch(layoutActions.setMenuList([\n      ...menuList,\n      ...adminList,\n    ]));\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [isAdmin]);\n\n  return (\n    <Switch>\n      {isAdmin && <Route path={`${path}/admin`} component={PrivateRoutes} />}\n      <Route path={`${path}`} component={PublicRoutes} />\n    </Switch>\n  );\n}\n"],"sourceRoot":""}